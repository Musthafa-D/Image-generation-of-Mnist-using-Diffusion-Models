data:
  path: Datasets
  dataset: mnist
  task: diffusion
  scaler: "01"
  shuffle_train: True
  batch_size: 40
  
learning:
  num_epochs: 1
  testevery: 1
  optimizer: Adam
  criterion: MSELoss
  diffusion_model: 'latent_dm' # 'ddpm', 'cddpm', 'latent_dm' or 'conditional_latent_dm' only
  noise_prediction_model: 'unet_latent' # 'unet', 'unet_latent', 'conditional_unet', or 'conditional_unet_latent' only
  layer: 'nlrl' # 'linear' or 'nlrl' only.
  n_steps: 1000
  learning_rate_exp: -3.53
  denoising_option: 1

network:
  unet:
    time_dim: 256
    initial_in_channels: 1
    final_out_channels: 1
    hidden_channels: 16
    device: "cuda"

  conditional_unet:
    time_dim: 256
    initial_in_channels: 1
    final_out_channels: 1
    hidden_channels: 16
    num_classes: 10
    device: "cuda"
    
  unet_latent:
    time_dim: 256
    initial_in_channels: 64
    final_out_channels: 64
    hidden_channels: 64
    device: "cuda"

  conditional_unet_latent:
    time_dim: 256
    initial_in_channels: 64
    final_out_channels: 64
    hidden_channels: 64
    num_classes: 10
    device: "cuda"

diffusion:
  ddpm:
    min_beta: 0.0001
    max_beta: 0.02
    image_chw: (1, 32, 32)
    
  latent:
    min_beta: 0.0001
    max_beta: 0.02
    image_chw: (1, 32, 32)
    denoiser: "Simple_en_de"
    in_channels: 3
    hidden_channels: 16

classifier_nlrl: # make no changes
  filter_growth_rate: 2
  dropout_rate: 0.2
  final_channel: 8
  activation_function: RReLU
  initial_out_channels: 32
  final_layer: 'nlrl'
  num_blocks: 3

classifier_linear: # make no changes
  filter_growth_rate: 2
  dropout_rate: 0.2
  final_channel: 8
  activation_function: RReLU
  initial_out_channels: 32
  final_layer: 'linear' # only 'linear', or 'nlrl'.
  num_blocks: 3

discriminator_nlrl: # make no changes
  name: "GAN" # GAN for ddpm and CGAN for cddpm
  hidden_channels: 64
  noise_dim: 10
  final_layer: 'nlrl'

discriminator_linear: # make no changes
  name: "GAN" # GAN for ddpm and CGAN for cddpm
  hidden_channels: 64
  noise_dim: 10 
  final_layer: 'linear'
  
trained_en_de: # make no changes
  initial_in_channels: 1
  final_out_channels: 1
  hidden_channels: 16
  device: "cuda"

trained_conditional_en_de: # make no changes
  num_labels: 10
  label_dim: 256
  initial_in_channels: 1
  final_out_channels: 1
  hidden_channels: 16
  device: "cuda"
